import streamlit as st
import pandas as pd
from core.database import get_db_connection, get_category_tree, get_patterns_for_category

st.set_page_config(page_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", layout="wide")

conn = get_db_connection()

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---

def display_category_tree(categories, level=0):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–º–æ—â—å—é st.expander."""
    for category in categories:
        indent = "&nbsp;" * 4 * level
        expander_label = f"{indent}üìÅ {category['name']}"
        with st.expander(expander_label):
            st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {category.get('description', '–ù–µ—Ç')}")
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if st.button(f"–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ '{category['name']}'", key=f"select_cat_{category['id']}"):
                st.session_state.selected_category_id = category['id']
                st.session_state.selected_category_name = category['name']

            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if category['children']:
                display_category_tree(category['children'], level + 1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if 'category_tree' not in st.session_state:
    st.session_state.category_tree = get_category_tree(conn)
if 'selected_category_id' not in st.session_state:
    st.session_state.selected_category_id = None
if 'selected_category_name' not in st.session_state:
    st.session_state.selected_category_name = None

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.title("–ò–µ—Ä–∞—Ä—Ö–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤")

st.write("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã –≤ –Ω–∏—Ö.")

if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
    st.session_state.category_tree = get_category_tree(conn)
    st.rerun()

col1, col2 = st.columns([1, 2])

with col1:
    st.header("–î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    if st.session_state.category_tree:
        display_category_tree(st.session_state.category_tree)
    else:
        st.warning("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

with col2:
    st.header("–ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    if st.session_state.selected_category_id:
        st.subheader(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: **{st.session_state.selected_category_name}**")
        
        patterns = get_patterns_for_category(conn, st.session_state.selected_category_id)
        
        if patterns:
            df = pd.DataFrame(patterns)
            df_display = df[['id', 'text', 'freq', 'qty']]
            df_display.columns = ['ID', '–¢–µ–∫—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞', '–ß–∞—Å—Ç–æ—Ç–∞ (ipm)', '–ö–æ–ª-–≤–æ']
            st.dataframe(df_display, use_container_width=True, hide_index=True)
        else:
            st.info("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π –ø–∞—Ç—Ç–µ—Ä–Ω—ã.")
