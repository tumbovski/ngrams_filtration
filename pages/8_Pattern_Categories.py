import streamlit as st
import pandas as pd
from core.database import (
    get_db_connection, 
    get_category_tree, 
    get_pattern_by_id,
    get_examples_by_pattern_id, 
    count_patterns_for_category,
    get_patterns_for_category
)

st.set_page_config(page_title="–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤", layout="wide")

conn = get_db_connection()

# --- –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---

@st.cache_data(ttl=3600)
def cached_get_pattern_by_id(pattern_id):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ ID."""
    return get_pattern_by_id(pattern_id)

@st.cache_data(ttl=3600)
def cached_get_examples_by_pattern_id(pattern_id):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ —Ñ—Ä–∞–∑."""
    db_conn = get_db_connection()
    if not db_conn: return []
    try:
        examples = get_examples_by_pattern_id(db_conn, pattern_id)
        return [{"text": row[0], "freq": row[1]} for row in examples]
    finally:
        if db_conn: db_conn.close()

@st.cache_data(ttl=3600)
def cached_count_patterns_for_category(category_id):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, —Ç.–∫. –æ—Å–Ω–æ–≤–Ω–æ–µ 'conn' –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–Ω—è—Ç–æ
    with get_db_connection() as db_conn:
        return count_patterns_for_category(db_conn, category_id) if db_conn else 0

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è ---

def display_category_tree(categories, level=0):
    """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Å –ø–æ–º–æ—â—å—é st.expander."""
    for category in categories:
        indent = "&nbsp;" * 4 * level
        expander_label = f"{indent}üìÅ {category['name']}"
        with st.expander(expander_label):
            st.caption(f"{category.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}")
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            if st.button(f"–í—ã–±—Ä–∞—Ç—å '{category['name']}'", key=f"select_cat_{category['id']}"):
                st.session_state.selected_category_id = category['id']
                st.session_state.selected_category_name = category['name']
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º ID –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                st.session_state.pattern_id_input = None
                # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                st.session_state.current_page = 1
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –¥–æ—á–µ—Ä–Ω–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            if category['children']:
                display_category_tree(category['children'], level + 1)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ---
if 'category_tree' not in st.session_state:
    st.session_state.category_tree = get_category_tree(conn)
if 'selected_category_id' not in st.session_state:
    st.session_state.selected_category_id = None
if 'selected_category_name' not in st.session_state:
    st.session_state.selected_category_name = None
if 'pattern_id_input' not in st.session_state:
    st.session_state.pattern_id_input = None
if 'current_page' not in st.session_state:
    st.session_state.current_page = 1

# --- –û—Å–Ω–æ–≤–Ω–∞—è —á–∞—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.title("–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

st.write("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏–µ—Ä–∞—Ä—Ö–∏—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –Ω–∏—Ö, –∞ —Ç–∞–∫–∂–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã, –≤–≤–æ–¥—è –∏—Ö ID.")

if st.button("–û–±–Ω–æ–≤–∏—Ç—å –¥–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"):
    st.session_state.category_tree = get_category_tree(conn)
    st.rerun()

col1, col2 = st.columns([1, 2])

with col1:
    st.header("–î–µ—Ä–µ–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    if st.session_state.category_tree:
        display_category_tree(st.session_state.category_tree)
    else:
        st.warning("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏.")

with col2:
    # --- –†–∞–∑–¥–µ–ª –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ---
    st.header("–ü–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    if st.session_state.selected_category_id:
        category_name = st.session_state.selected_category_name
        category_id = st.session_state.selected_category_id
        
        with st.spinner(f"–ü–æ–¥—Å—á–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}'..."):
            pattern_count = cached_count_patterns_for_category(category_id)
        
        st.info(f"–í—ã–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: **{category_name}**. –í –Ω–µ–π –Ω–∞–π–¥–µ–Ω–æ **{pattern_count:,}** –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.".replace(',', ' '))

        if pattern_count > 0:
            PAGE_SIZE = 50
            total_pages = (pattern_count + PAGE_SIZE - 1) // PAGE_SIZE

            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ –¥–æ–ø—É—Å—Ç–∏–º—ã—Ö –ø—Ä–µ–¥–µ–ª–∞—Ö
            if st.session_state.current_page > total_pages:
                st.session_state.current_page = total_pages
            
            with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤..."):
                patterns = get_patterns_for_category(conn, category_id, page=st.session_state.current_page, page_size=PAGE_SIZE)

            if patterns:
                df = pd.DataFrame(patterns)
                df_display = df[['id', 'text', 'freq', 'qty']]
                df_display.columns = ['ID', '–¢–µ–∫—Å—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–∞', '–ß–∞—Å—Ç–æ—Ç–∞ (ipm)', '–ö–æ–ª-–≤–æ']
                st.dataframe(df_display, use_container_width=True, hide_index=True)

                # –ü–∞–≥–∏–Ω–∞—Ü–∏—è
                page_cols = st.columns([1.5, 1.5, 1, 5])
                
                def prev_page(): st.session_state.current_page -= 1
                def next_page(): st.session_state.current_page += 1

                page_cols[0].button("‚óÄÔ∏è –ù–∞–∑–∞–¥", on_click=prev_page, disabled=st.session_state.current_page <= 1, use_container_width=True)
                page_cols[1].button("–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è", on_click=next_page, disabled=st.session_state.current_page >= total_pages, use_container_width=True)
                with page_cols[2]:
                    st.write(f"–°—Ç—Ä. {st.session_state.current_page} / {total_pages}")
            else:
                st.info("–ù–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.")
    else:
        st.info("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Å–ª–µ–≤–∞, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤.")

    st.divider()

    # --- –†–∞–∑–¥–µ–ª –∞–Ω–∞–ª–∏–∑–∞ –ø–æ ID ---
    with st.container(border=True):
        st.subheader("–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –ø–æ ID")
        pattern_id = st.number_input("–í–≤–µ–¥–∏—Ç–µ ID –ø–∞—Ç—Ç–µ—Ä–Ω–∞:", min_value=1, step=1, value=None, key="pattern_id_input")

        if pattern_id:
            with st.spinner(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞ ID {pattern_id}..."):
                pattern_data = cached_get_pattern_by_id(pattern_id)
            
            if pattern_data:
                st.markdown(f"##### –ü–∞—Ç—Ç–µ—Ä–Ω: `{pattern_data['text']}`")
                st.markdown(f"**ID:** {pattern_data['id']} | **F:** {pattern_data['freq']:.2f} | **Q:** {pattern_data['qty']}")
                
                if pattern_data.get('categories'):
                    categories_str = ", ".join(pattern_data['categories'])
                    st.markdown(f"**–ü—Ä–∏—Å–≤–æ–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:** {categories_str}")
                else:
                    st.markdown("**–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –ø—Ä–∏—Å–≤–æ–µ–Ω—ã.**")
                
                with st.expander("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑"):
                    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏–º–µ—Ä–æ–≤..."):
                        examples = cached_get_examples_by_pattern_id(pattern_id)
                    
                    if examples:
                        df_examples = pd.DataFrame(examples)
                        df_examples.rename(columns={'text': '–§—Ä–∞–∑–∞', 'freq': '–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å (ipm)'}, inplace=True)
                        st.dataframe(df_examples, use_container_width=True, hide_index=True)
                    else:
                        st.info("–ü—Ä–∏–º–µ—Ä—ã —Ñ—Ä–∞–∑ –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞—Ç—Ç–µ—Ä–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            else:
                st.error(f"–ü–∞—Ç—Ç–µ—Ä–Ω —Å ID {pattern_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
