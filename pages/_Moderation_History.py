import streamlit as st
import pandas as pd
from core.database import (
    get_db_connection,
    get_user_by_login,
    get_moderation_history,
    update_moderation_entry,
    process_moderation_submission,
    get_examples_by_pattern_id,
    delete_moderation_record # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
)

st.set_page_config(layout="wide", page_title="Moderation History")

# Check authentication status
if 'logged_in' not in st.session_state or not st.session_state.logged_in or 'user_login' not in st.session_state:
    st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
    st.switch_page("Home.py")

st.title("–ò—Å—Ç–æ—Ä–∏—è –º–æ–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–π")

# --- Database Connection ---
@st.cache_resource
def init_connection():
    return get_db_connection()

conn = init_connection()

if not conn:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ .env —Ñ–∞–π–ª–µ –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞.")
    st.stop()

# --- Get User ID ---
current_user = get_user_by_login(conn, st.session_state.user_login)
if not current_user:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞.")
    st.stop()
user_id = current_user['id']

# --- Helper for refreshing history ---
def refresh_moderation_history():
    st.session_state.moderation_history = get_moderation_history(conn, user_id)

# Initialize or refresh history
if 'moderation_history' not in st.session_state:
    refresh_moderation_history()

# --- UI State Management ---
if 'editing_entry_id' not in st.session_state:
    st.session_state.editing_entry_id = None
if 'show_phrases_for_pattern' not in st.session_state:
    st.session_state.show_phrases_for_pattern = {}

# --- Callback Functions ---
def set_editing_entry(entry_id):
    st.session_state.editing_entry_id = entry_id
    # When entering edit mode, hide phrases for all patterns to avoid clutter
    st.session_state.show_phrases_for_pattern = {}


def save_edited_entry(entry_id, new_rating, new_comment, new_tag):
    if update_moderation_entry(conn, entry_id, new_rating, new_comment, new_tag):
        st.toast("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", icon="‚úÖ")
        st.session_state.editing_entry_id = None # Exit edit mode
        refresh_moderation_history() # Refresh data
    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

def cancel_edit():
    st.session_state.editing_entry_id = None

def delete_entry(entry_id):
    """Callback to delete a moderation record."""
    success, pattern_id = delete_moderation_record(conn, entry_id)
    if success:
        st.toast(f"–ó–∞–ø–∏—Å—å {entry_id} —É–¥–∞–ª–µ–Ω–∞.", icon="üóëÔ∏è")
        if pattern_id:
            # Recalculate stats for the affected pattern
            process_moderation_submission(conn, pattern_id)
        refresh_moderation_history()
        # Ensure we exit edit mode if the deleted entry was being edited
        if st.session_state.editing_entry_id == entry_id:
            st.session_state.editing_entry_id = None
    else:
        st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.")

def toggle_phrase_display(entry_id):
    """Toggle the visibility of the phrase list for a given entry."""
    st.session_state.show_phrases_for_pattern[entry_id] = not st.session_state.show_phrases_for_pattern.get(entry_id, False)


# --- Display Moderation History ---
if not st.session_state.moderation_history:
    st.info("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
else:
    for entry in st.session_state.moderation_history:
        entry_id = entry['id']
        is_editing = st.session_state.editing_entry_id == entry_id
        
        with st.expander(f"–ü–∞—Ç—Ç–µ—Ä–Ω: {entry['pattern_text']} (ID –∑–∞–ø–∏—Å–∏: {entry_id})", expanded=is_editing):
            if is_editing:
                # --- Edit Mode ---
                st.subheader("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏")
                
                new_rating = st.slider("–û—Ü–µ–Ω–∫–∞", 1, 5, entry['rating'], key=f"rating_{entry_id}")
                new_comment = st.text_area("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π", entry['comment'], key=f"comment_{entry_id}")
                new_tag = st.text_input("–¢–µ–≥", entry['tag'], key=f"tag_{entry_id}")

                col1, col2, _ = st.columns([1, 1, 5])
                with col1:
                    st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", on_click=save_edited_entry, args=(entry_id, new_rating, new_comment, new_tag), key=f"save_{entry_id}", use_container_width=True)
                with col2:
                    st.button("–û—Ç–º–µ–Ω–∞", on_click=cancel_edit, key=f"cancel_{entry_id}", use_container_width=True)
            else:
                # --- View Mode ---
                date_str = f"| **–î–∞—Ç–∞:** {entry['submitted_at'].strftime('%Y-%m-%d %H:%M:%S')}" if entry.get('submitted_at') else ""
                st.write(f"**–û—Ü–µ–Ω–∫–∞:** {entry['rating']} {date_str}")
                st.write(f"**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:** {entry['comment'] if entry['comment'] else '–ù–µ—Ç'}")
                st.write(f"**–¢–µ–≥:** {entry['tag'] if entry['tag'] else '–ù–µ—Ç'}")
                
                st.markdown("---")
                
                col_edit, col_delete, col_phrases, _ = st.columns([1.2, 1, 1.5, 4])
                with col_edit:
                    st.button("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", on_click=set_editing_entry, args=(entry_id,), key=f"edit_{entry_id}", use_container_width=True)
                
                with col_delete:
                    st.button("–£–¥–∞–ª–∏—Ç—å", on_click=delete_entry, args=(entry_id,), key=f"delete_{entry_id}", type="primary", use_container_width=True)

                with col_phrases:
                    show_phrases = st.session_state.show_phrases_for_pattern.get(entry_id, False)
                    button_label = "–ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–∞–∑—ã" if not show_phrases else "–°–∫—Ä—ã—Ç—å —Ñ—Ä–∞–∑—ã"
                    st.button(button_label, key=f"toggle_phrases_{entry_id}", on_click=toggle_phrase_display, args=(entry_id,), use_container_width=True)

                if st.session_state.show_phrases_for_pattern.get(entry_id, False):
                    st.subheader("–§—Ä–∞–∑—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—É")
                    phrases_data = get_examples_by_pattern_id(conn, entry['pattern_id'])
                    if phrases_data:
                        df_phrases = pd.DataFrame(phrases_data, columns=["–§—Ä–∞–∑–∞", "–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å (–º–ª–Ω)"])
                        # –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞–Ω–∏–µ –ø–æ —à–∏—Ä–∏–Ω–µ
                        st.dataframe(df_phrases[["–ß–∞—Å—Ç–æ—Ç–Ω–æ—Å—Ç—å (–º–ª–Ω)", "–§—Ä–∞–∑–∞"]], use_container_width=False, hide_index=True, height=300)
                    else:
                        st.info("–ù–µ—Ç —Ñ—Ä–∞–∑, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —ç—Ç–æ–º—É –ø–∞—Ç—Ç–µ—Ä–Ω—É.")


if st.button("–û–±–Ω–æ–≤–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"):
    refresh_moderation_history()
    st.rerun()